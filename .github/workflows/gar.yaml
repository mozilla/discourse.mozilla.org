name: Delivery & Release (Docker Build, Tag & Push)

on:
  push:
    branches:
      - master
    tags:
      - '*'

  workflow_dispatch:
    inputs:
      ref:
        description: 'ref to be deployed (e.g. "refs/heads/master", "v1.0.0", "2c0472cf")'
        type: string
        required: true
        default: refs/heads/master

env:
  IMAGE_NAME: discourse
  GAR_LOCATION: us
  GCP_PROJECT_ID: moz-fx-discourse-prod
  GAR_REPOSITORY: discourse-prod

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      ENV: ${{ steps.tag.outputs.ENV }}
      CI_COMMIT_SHORT_SHA: ${{ steps.tag.outputs.CI_COMMIT_SHORT_SHA }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Tag & Environment
        id: tag
        run: |-
          CI_COMMIT_SHORT_SHA=$(git describe --abbrev=7 --always --tags)

          if [[ ${GITHUB_REF##*/} = "master" ]]; then
            ENV=stage

          fi

          echo "CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "ENV=${ENV:-prod}" >> $GITHUB_OUTPUT

          echo "Commit for this pipeline: ${CI_COMMIT_SHORT_SHA}"
          echo "Environment for this pipeline: ${ENV:-prod}";

  build-push-promote-image:
    environment: build
    permissions:
      contents: read
      deployments: write
      id-token: write
    runs-on: ubuntu-latest
    needs: prepare

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: discourse
          POSTGRES_PORT: 5432
          POSTGRES_USER: discourse

        ports:
          - 5432:5432

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create version.json
        run: |
          # create a version.json per
          # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
          printf '{"commit":"%s","version":"%s","source":"%s","build":"%s"}\n' \
          "$GITHUB_SHA" \
          "$GITHUB_REF_NAME" \
          "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" \
          "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" > version.json


      - name: Setup Database per CI Environment
        id: env_databases_setup
        env:
          ENV: ${{ needs.prepare.outputs.ENV }}

        run: |
          set -e
          set -u
          echo "Creating user and database 'discourse-$ENV'"
          psql -v ON_ERROR_STOP=1 "postgresql://discourse:discourse@localhost:5432" <<-EOSQL
              CREATE DATABASE "discourse-$ENV";
              GRANT ALL PRIVILEGES ON DATABASE "discourse-$ENV" TO discourse;
          EOSQL

      - id: gcp_auth
        name: GCP authentication
        uses: google-github-actions/auth@v2
        with:
            token_format: access_token
            service_account:  artifact-writer@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
            workload_identity_provider: ${{ vars.GCPV2_GITHUB_WORKLOAD_IDENTITY_PROVIDER }}

      - id: docker_login
        name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.gcp_auth.outputs.access_token }}

      - name: Build and Push Stage Image to GAR
        id: build-push
        env:

          ENV: ${{ needs.prepare.outputs.ENV }}
          CI_COMMIT_SHORT_SHA: ${{ needs.prepare.outputs.CI_COMMIT_SHORT_SHA }}

        run: |
          export GHA_NETWORK=$(docker network ls --filter driver=bridge --filter name=github_network_ --format '{{.Name}}')

          git clone https://github.com/discourse/discourse_docker.git && cd discourse_docker
          mkdir -p containers includes

          cp ../discourse-$ENV.yml containers/app.yml
          cp ../includes/* includes/

          sed -i "s,environment,$ENV," includes/after_build.yml
          sed -i "s,gha_bridge_network,$GHA_NETWORK," containers/app.yml

          ./launcher bootstrap app

          TIMESTAMP=$(date '+%F.%H%M%S')

          docker tag local_discourse/app:latest ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:${ENV}-${CI_COMMIT_SHORT_SHA}-${TIMESTAMP}
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:${ENV}-${CI_COMMIT_SHORT_SHA}-${TIMESTAMP}

          docker tag local_discourse/app:latest ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:$ENV-$CI_COMMIT_SHORT_SHA
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:$ENV-$CI_COMMIT_SHORT_SHA

          docker tag ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:$ENV-$CI_COMMIT_SHORT_SHA ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:$ENV-$GITHUB_SHA
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:$ENV-$GITHUB_SHA1