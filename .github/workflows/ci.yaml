name: CI Build Check

on:
  push:
    branches:
      - '**'
      - '!master'
  pull_request_target: {}

jobs:
  prepare-dev:
    runs-on: ubuntu-latest
    outputs:
      ENV: ${{ steps.tag.outputs.env }}
      TAG: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Tag
        id: tag
        run: |
          export CI_COMMIT_SHORT_SHA=$(git describe --abbrev=7 --always --tags)
          echo "::set-output name=tag::$CI_COMMIT_SHORT_SHA"
          echo "Commit for this pipeline: ";
          echo $CI_COMMIT_SHORT_SHA;
          export ENV="dev"
          echo "::set-output name=env::$ENV"
          echo "Environment for this pipeline: ";
          echo $ENV

  build-image-dev:
    runs-on: ubuntu-latest
    needs: prepare-dev

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: discourse
          POSTGRES_PASSWORD: discourse
          POSTGRES_PORT: 5432
          POSTGRES_USER: discourse
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        id: configure-aws-creds
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Pre-build Image
        id: prebuild
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: discourse
          ENV: ${{ needs.prepare-dev.outputs.ENV }}
          TAG: ${{ needs.prepare-dev.outputs.TAG }}
        run: |
          git clone -q https://github.com/discourse/discourse_docker.git
          cd discourse_docker
          mkdir -p includes && mkdir -p containers
          cp ../discourse-$ENV.yml containers/app.yml
          cp ../includes/* includes/
          sed -i "s,environment,$ENV," includes/after_build.yml
          sed -i "s,code-revision,tests-passed," containers/app.yml
          ./launcher bootstrap app

  # prepare-stage:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     ENV: ${{ steps.tag.outputs.env }}
  #     TAG: ${{ steps.tag.outputs.tag }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Set Tag
  #       id: tag
  #       run: |
  #         export CI_COMMIT_SHORT_SHA=$(git describe --abbrev=7 --always --tags)
  #         echo "::set-output name=tag::$CI_COMMIT_SHORT_SHA"
  #         echo "Commit for this pipeline: ";
  #         echo $CI_COMMIT_SHORT_SHA;
  #         export ENV="stage"
  #         echo "::set-output name=env::$ENV"
  #         echo "Environment for this pipeline: ";
  #         echo $ENV

  # build-image-stage:
  #   runs-on: ubuntu-latest
  #   needs: prepare-stage
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       id: configure-aws-creds
  #       with:
  #         aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #     - name: Pre-build Image
  #       id: prebuild
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: discourse
  #         ENV: ${{ needs.prepare-stage.outputs.ENV }}
  #         TAG: ${{ needs.prepare-stage.outputs.TAG }}
  #       run: |
  #         git clone -q https://github.com/discourse/discourse_docker.git
  #         cd discourse_docker
  #         git checkout 86b9032bbe75cfd11476c44a5c62f8882dd8ad97
  #         mkdir -p includes && mkdir -p containers
  #         cp ../discourse-$ENV.yml containers/app.yml
  #         cp ../includes/* includes/
  #         sed -i "s,environment,$ENV," includes/after_build.yml
  #         sed -i "s,code-revision,$TAG," containers/app.yml
  #         ./launcher bootstrap app

  # prepare-prod:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     ENV: ${{ steps.tag.outputs.env }}
  #     TAG: ${{ steps.tag.outputs.tag }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Set Tag
  #       id: tag
  #       run: |
  #         export CI_COMMIT_SHORT_SHA=$(git describe --abbrev=7 --always --tags)
  #         echo "::set-output name=tag::$CI_COMMIT_SHORT_SHA"
  #         echo "Commit for this pipeline: ";
  #         echo $CI_COMMIT_SHORT_SHA;
  #         export ENV="prod"
  #         echo "::set-output name=env::$ENV"
  #         echo "Environment for this pipeline: ";
  #         echo $ENV

  # build-image-prod:
  #   runs-on: ubuntu-latest
  #   needs: prepare-prod
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       id: configure-aws-creds
  #       with:
  #         aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #     - name: Pre-build Image
  #       id: prebuild
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: discourse
  #         ENV: ${{ needs.prepare-prod.outputs.ENV }}
  #         TAG: ${{ needs.prepare-prod.outputs.TAG }}
  #       run: |
  #         git clone -q https://github.com/discourse/discourse_docker.git
  #         cd discourse_docker
  #         git checkout 86b9032bbe75cfd11476c44a5c62f8882dd8ad97
  #         mkdir -p includes && mkdir -p containers
  #         cp ../discourse-$ENV.yml containers/app.yml
  #         cp ../includes/* includes/
  #         sed -i "s,environment,$ENV," includes/after_build.yml
  #         sed -i "s,code-revision,$TAG," containers/app.yml
  #         ./launcher bootstrap app
